import CartesiApplicationContract from "@cartesi/rollups-v2/out/Application.sol/Application.json" with { type: "json" };
import OutputsContract from "@cartesi/rollups-v2/out/Outputs.sol/Outputs.json" with { type: "json" };
import hardhatDeploy from "@sunodo/wagmi-plugin-hardhat-deploy";
import { ContractConfig, defineConfig } from "@wagmi/cli";
import { react } from "@wagmi/cli/plugins";
import { readFileSync, readdirSync } from "node:fs";
import { join } from "node:path";
import { Abi, Address, Hex, erc20Abi, erc721Abi } from "viem";
import CartesiDAppContract from "../../node_modules/@cartesi/rollups/export/artifacts/contracts/dapp/CartesiDApp.sol/CartesiDApp.json";
import { erc1155Abi } from "./abi/ERC1155";

interface Deployment {
    address: Address;
    abi: Abi;
    constructorArgs: Array<any>;
    linkedLibraries: Record<any, any>;
    deployTxnHash: Hex;
    deployTxnBlockNumber: string;
    deployTimestamp: string;
    sourceName: string;
    contractName: string;
    deployedOn: string;
    gasUsed: number;
    gasCost: string;
}

const deploymentsDir = join(process.cwd(), "deployments");

/**
 * Read from /deployments folder generated by cannon.
 * add a prefix 'v2' to the contract's name making it easy to distinguish between v1 and v2 contracts
 * while also avoiding collisions and making intellisense useful (e.g. useSimulateV2...)
 * @returns
 */
const generateV2ContractsConfig = (): ContractConfig[] => {
    const files = readdirSync(deploymentsDir);

    const contractConfigs: ContractConfig[] = files.map((file) => {
        const content = readFileSync(join(deploymentsDir, file), { encoding: "utf-8" });
        const deployment = JSON.parse(content) as Deployment;

        return {
            abi: deployment.abi,
            name: `V2${deployment.contractName}`,
            address: deployment.address,
        };
    });

    return contractConfigs;
};

export default defineConfig({
    out: "src/index.tsx",
    contracts: [
        {
            name: "erc20",
            abi: erc20Abi,
        },
        {
            name: "erc721",
            abi: erc721Abi,
        },
        {
            name: "CartesiDApp",
            abi: CartesiDAppContract.abi as Abi,
        },
        {
            abi: erc1155Abi,
            name: "ERC1155",
        },

        {
            name: "V2CartesiApplication",
            abi: CartesiApplicationContract.abi as Abi,
        },
        {
            name: "V2OutputFactory",
            abi: OutputsContract.abi as Abi,
        },

        ...generateV2ContractsConfig(),
    ],
    plugins: [
        hardhatDeploy({
            directory: "../../node_modules/@cartesi/rollups/export/abi",
        }),
        react(),
    ],
});
