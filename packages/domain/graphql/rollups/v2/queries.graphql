# FRAGMENTS 

fragment pageInfoFields on PageInfo {
  startCursor
  endCursor
  hasNextPage
  hasPreviousPage
}

fragment vouchersFields on Input {
   vouchers(first: $firstVouchers, after: $vouchersNextPage, before: $vouchersPrevPage, last: $lastVouchers) {
      totalCount
      edges {
        node {
          index
          input {
            index
          }
          destination
          payload
          proof {
            outputIndex
            outputHashesSiblings
          }
        }
        cursor
      }
      pageInfo {
        ...pageInfoFields
      }
  }
}

fragment noticesFields on Input {
  notices(first: $firstNotices, after: $noticesNextPage, before: $noticesPrevPage, last: $lastNotices){
      totalCount
      edges {
        node {
          index
          payload
        }
        cursor
      }
      pageInfo {
        ...pageInfoFields
      }
    }
}

fragment reportsFields on Input {
  reports(first: $firstReports, after: $reportsNextPage, before: $reportsPrevPage, last: $lastReports) {
    totalCount
    edges {
      node {
        index
        payload
      }
      cursor
    }
    pageInfo {
      ...pageInfoFields
    }
  }
}


 # QUERIES

query inputDetails (
  $inputId: String!  
  $firstNotices: Int
  $lastNotices: Int
  $noticesNextPage: String
  $noticesPrevPage: String
  $firstReports: Int
  $lastReports: Int
  $reportsNextPage: String
  $reportsPrevPage: String
  $firstVouchers: Int
  $lastVouchers: Int
  $vouchersNextPage: String
  $vouchersPrevPage: String
) {
  input(id: $inputId){  
  	...vouchersFields
    ...noticesFields
    ...reportsFields
  }
}

query checkStatus {
  inputs {
    totalCount
  }
  vouchers {
    totalCount
  }
  reports {
    totalCount
  }
  notices {
    totalCount
  }
}

query inputStatus($id: String!) {
  input(id: $id) {
    status
  }
}
