"""
The @defer directive may be specified on a fragment spread to imply
de-prioritization, that causes the fragment to be omitted in the initial
response, and delivered as a subsequent response afterward. A query with @defer
directive will cause the request to potentially return multiple responses, where
non-deferred data is delivered in the initial response and data deferred
delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The @specifiedBy built-in directive is used within the type system definition
language to provide a scalar specification URL for specifying the behavior of
custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR

input AddressFilterInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  and: [ConvenientFilter]
  or: [ConvenientFilter]
}

scalar BigInt

input BooleanFilterInput {
  eq: Boolean
  ne: Boolean
  and: [ConvenientFilter]
  or: [ConvenientFilter]
}

enum CompletionStatus {
  UNPROCESSED
  ACCEPTED
  REJECTED
  EXCEPTION
  MACHINE_HALTED
  CYCLE_LIMIT_EXCEEDED
  TIME_LIMIT_EXCEEDED
  PAYLOAD_LENGTH_LIMIT_EXCEEDED
}

input ConvenientFilter {
  destination: AddressFilterInput
  executed: BooleanFilterInput
  and: [ConvenientFilter]
  or: [ConvenientFilter]
}

"""Request submitted to the application to advance its state"""
type Input {
  """id of the input"""
  id: String!

  """Input index starting from genesis"""
  index: Int!

  """Status of the input"""
  status: CompletionStatus!

  """Address responsible for submitting the input"""
  msgSender: String!

  """
  Timestamp associated with the input submission, as defined by the base layer's block in which it was recorded
  """
  timestamp: BigInt! @deprecated(reason: "Use `blockTimestamp` instead")

  """Number of the base layer block in which the input was recorded"""
  blockNumber: BigInt!

  """Input payload in Ethereum hex binary format, starting with '0x'"""
  payload: String!

  """Get vouchers from this particular input with support for pagination"""
  vouchers(first: Int, last: Int, after: String, before: String): VoucherConnection!

  """Get notices from this particular input with support for pagination"""
  notices(first: Int, last: Int, after: String, before: String): NoticeConnection!

  """Get reports from this particular input with support for pagination"""
  reports(first: Int, last: Int, after: String, before: String): ReportConnection!

  """Timestamp associated with the Espresso input submission"""
  espressoTimestamp: String @deprecated(reason: "Will be removed")

  """Number of the Espresso block in which the input was recorded"""
  espressoBlockNumber: String @deprecated(reason: "Will be removed")

  """Input index in the Input Box"""
  inputBoxIndex: String
  blockTimestamp: BigInt
  prevRandao: String
}

"""Pagination result"""
type InputConnection {
  """Total number of entries that match the query"""
  totalCount: Int!

  """Pagination entries returned for the current page"""
  edges: [InputEdge!]!

  """Pagination metadata"""
  pageInfo: PageInfo!
}

"""Pagination entry"""
type InputEdge {
  """Node instance"""
  node: Input!

  """Pagination cursor"""
  cursor: String!
}

"""Filter object to restrict results depending on input properties"""
input InputFilter {
  """Filter only inputs with index lower than a given value"""
  indexLowerThan: Int

  """Filter only inputs with index greater than a given value"""
  indexGreaterThan: Int

  """Filter only inputs with the message sender"""
  msgSender: String

  """Filter only inputs from 'inputbox' or 'espresso'"""
  type: String
}

"""
Informational statement that can be validated in the base layer blockchain
"""
type Notice {
  """Notice index within the context of the input that produced it"""
  index: Int!

  """Input whose processing produced the notice"""
  input: Input!

  """
  Notice data as a payload in Ethereum hex binary format, starting with '0x'
  """
  payload: String!

  """
  Proof object that allows this notice to be validated by the base layer blockchain
  """
  proof: Proof
}

"""Pagination result"""
type NoticeConnection {
  """Total number of entries that match the query"""
  totalCount: Int!

  """Pagination entries returned for the current page"""
  edges: [NoticeEdge!]!

  """Pagination metadata"""
  pageInfo: PageInfo!
}

"""Pagination entry"""
type NoticeEdge {
  """Node instance"""
  node: Notice!

  """Pagination cursor"""
  cursor: String!
}

"""Page metadata for the cursor-based Connection pagination pattern"""
type PageInfo {
  """Cursor pointing to the first entry of the page"""
  startCursor: String

  """Cursor pointing to the last entry of the page"""
  endCursor: String

  """Indicates if there are additional entries after the end curs"""
  hasNextPage: Boolean!

  """Indicates if there are additional entries before the start curs"""
  hasPreviousPage: Boolean!
}

"""
Data that can be used as proof to validate notices and execute vouchers on the base layer blockchain
"""
type Proof {
  outputIndex: BigInt!
  outputHashesSiblings: [String]!
}

"""Top level queries"""
type Query {
  """Get input based on its identifier"""
  input(id: String!): Input!

  """Get a voucher based on its index"""
  voucher(outputIndex: Int!): Voucher!

  """Get a notice based on its index"""
  notice(outputIndex: Int!): Notice!

  """Get a report based on its index"""
  report(reportIndex: Int!): Report!

  """Get inputs with support for pagination"""
  inputs(first: Int, last: Int, after: String, before: String, where: InputFilter): InputConnection!

  """Get vouchers with support for pagination"""
  vouchers(first: Int, last: Int, after: String, before: String, filter: [ConvenientFilter]): VoucherConnection!

  """Get notices with support for pagination"""
  notices(first: Int, last: Int, after: String, before: String): NoticeConnection!

  """Get reports with support for pagination"""
  reports(first: Int, last: Int, after: String, before: String): ReportConnection!
}

"""Application log or diagnostic information"""
type Report {
  """Report index within the context of the input that produced it"""
  index: Int!

  """Input whose processing produced the report"""
  input: Input!

  """
  Report data as a payload in Ethereum hex binary format, starting with '0x'
  """
  payload: String!
}

"""Pagination result"""
type ReportConnection {
  """Total number of entries that match the query"""
  totalCount: Int!

  """Pagination entries returned for the current page"""
  edges: [ReportEdge!]!

  """Pagination metadata"""
  pageInfo: PageInfo!
}

"""Pagination entry"""
type ReportEdge {
  """Node instance"""
  node: Report!

  """Pagination cursor"""
  cursor: String!
}

"""
Representation of a transaction that can be carried out on the base layer blockchain, such as a transfer of assets
"""
type Voucher {
  """Voucher index within the context of the input that produced it"""
  index: Int!

  """Input whose processing produced the voucher"""
  input: Input!

  """
  Transaction destination address in Ethereum hex binary format (20 bytes), starting with '0x'
  """
  destination: String!

  """Transaction payload in Ethereum hex binary format, starting with '0x'"""
  payload: String!

  """
  Proof object that allows this voucher to be validated and executed on the base layer blockchain
  """
  proof: Proof
  value: BigInt

  """
  Indicates whether the voucher has been executed on the base layer blockchain
  """
  executed: Boolean
}

"""Pagination result"""
type VoucherConnection {
  """Total number of entries that match the query"""
  totalCount: Int!

  """Pagination entries returned for the current page"""
  edges: [VoucherEdge!]!

  """Pagination metadata"""
  pageInfo: PageInfo!
}

"""Pagination entry"""
type VoucherEdge {
  """Node instance"""
  node: Voucher!

  """Pagination cursor"""
  cursor: String!
}